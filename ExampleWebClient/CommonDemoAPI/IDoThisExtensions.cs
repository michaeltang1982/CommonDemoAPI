// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ExampleWebClient;
using ExampleWebClient.Models;
using Microsoft.Rest;

namespace ExampleWebClient
{
    public static partial class IDoThisExtensions
    {
        /// <param name='operations'>
        /// Reference to the ExampleWebClient.IIDoThis.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static object DeleteUserProfile(this IIDoThis operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIDoThis)s).DeleteUserProfileAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ExampleWebClient.IIDoThis.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> DeleteUserProfileAsync(this IIDoThis operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.DeleteUserProfileWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ExampleWebClient.IIDoThis.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static UserProfile GetUserProfile(this IIDoThis operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIDoThis)s).GetUserProfileAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ExampleWebClient.IIDoThis.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<UserProfile> GetUserProfileAsync(this IIDoThis operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ExampleWebClient.Models.UserProfile> result = await operations.GetUserProfileWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ExampleWebClient.IIDoThis.
        /// </param>
        public static string Hello(this IIDoThis operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIDoThis)s).HelloAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ExampleWebClient.IIDoThis.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> HelloAsync(this IIDoThis operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.HelloWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ExampleWebClient.IIDoThis.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        public static object PostUserProfile(this IIDoThis operations, string value)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIDoThis)s).PostUserProfileAsync(value);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ExampleWebClient.IIDoThis.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostUserProfileAsync(this IIDoThis operations, string value, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostUserProfileWithOperationResponseAsync(value, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ExampleWebClient.IIDoThis.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        public static object PutUserProfile(this IIDoThis operations, int id, string value)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIDoThis)s).PutUserProfileAsync(id, value);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ExampleWebClient.IIDoThis.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutUserProfileAsync(this IIDoThis operations, int id, string value, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutUserProfileWithOperationResponseAsync(id, value, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
